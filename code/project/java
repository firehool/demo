package com.mypck;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;

public class Frame3 extends JFrame implements ActionListener {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	JLabel answer = new JLabel("");
	JPanel pane = new JPanel(); // create pane object
	JButton pressme = new JButton("Press Me");

	Frame3() // the constructor
	{

		super("Event Handler Demo");
		setBounds(300, 300, 600, 500);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		createMenuBar();

		Container con = this.getContentPane(); // inherit main frame
		con.add(pane);
		pressme.setMnemonic('P'); // associate hotkey
		pressme.addActionListener(this); // register button listener
		pane.add(answer);
		pane.add(pressme);
		pressme.requestFocus();
		setVisible(true); // make frame visible
	}

	// here is the basic event handler
	public void actionPerformed(ActionEvent event) {
		Object source = event.getSource();
		if (source == pressme) {
			answer.setFont(new Font("Serif", Font.PLAIN, 24));
			answer.setForeground(new Color(50, 50, 0));
			answer.setVisible(true);
			answer.setText("Button pressed!");
			JOptionPane.showMessageDialog(null, "I hear you!", "Message Dialog", JOptionPane.PLAIN_MESSAGE);
			setVisible(true); // show something
		}
	}

	private void createMenuBar() {

		JMenuBar menubar = new JMenuBar();
		ImageIcon iconNew = new ImageIcon("new.png");
		ImageIcon iconOpen = new ImageIcon("Open.png");
		ImageIcon iconSave = new ImageIcon("save.png");
		ImageIcon iconExit = new ImageIcon("exit.png");
		
		

		JMenu file = new JMenu("File");
		file.setMnemonic(KeyEvent.VK_F);
		
		JMenu edit = new JMenu("edit");
		file.setMnemonic(KeyEvent.VK_E);
		
		JMenuItem newMi = new JMenuItem("New", iconNew);
		JMenuItem openMi = new JMenuItem("Open",iconOpen);
		JMenuItem saveMi = new JMenuItem("Save", iconSave);
		

		JMenuItem eMenuItem = new JMenuItem("Exit", iconExit);
		eMenuItem.setMnemonic(KeyEvent.VK_E);
		eMenuItem.setToolTipText("Exit application");
		eMenuItem.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent event) {
				System.exit(0);
			}
		});
		JMenuItem edit_eMenuItem = new JMenuItem("copy", iconExit);
		eMenuItem.setMnemonic(KeyEvent.VK_C);
		eMenuItem.setToolTipText("copy application");
		eMenuItem.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent event) {
				
			}
		});

		file.add(eMenuItem);
		edit.add(edit_eMenuItem);
		
		menubar.add(file);
		menubar.add(edit);

		setJMenuBar(menubar);
	}

	public static void main(String args[]) {
		new Frame3();
	}
}
